VARNIKA PRIYDARSHINI
70206
2017
     KL-22-K-9215

-----------
http://www.thejavageek.com/2017/04/14/installing-angular-material/
----------------------
Hello World App in Angular 4:
Prerequisites:
Node JS : Please install node js according to instructions provided on official site.
Visual Studio Code: Extremely good IDE. I am going to use this for tutorial series.
Once you have installed both, open your command prompt and type node -v, you should be able to see something like below


Node JS Version Check

It means you have successfully installed node js.

Create app from Angular CLI:
Angular CLI is an awesome tool to get started with a angular 4 project. It creates a fully functional well structured project for us which we can take forward.

Install Angular CLI using command npm install -g @angular/cli . -g option means it is installed globally for our system. Check angular version using ng -v.
 Create our first app using command ng new hello-world It will take a while and create a fully fledged app for you.

Now you will have your folder created called hello-world. navigate to it using cd hello-world and then do ng serve. You can see server is started.


Open your browser and visit localhost:4200 You will see “App works” printed on screen.

https://jjasonclark.com/how-to-setup-node-behind-web-proxy/
npm config set https-proxy http://proxy-user.wip.us.equifax.com/proxy.js

npm config set proxy http://proxy-user.wip.us.equifax.com/proxy.js


Angular CLI: 1.6.2
Node: 8.9.3
OS: win32 x64
Angular:

ng new hello-employee
ng serve

Angular Architecture:
Diagram below shows basic parts of an angular app. We will go through them one by one.

Angular Architecture
Angular Architecture

 

Templates:
Just like plain HTML, we can create angular templates which understand how to communicate with backing components.
We can use plain html tags and component tags.
These templates ultimately create DOM structure on web browser. Data in templates is held by backing components.
Components:
Components are  the ones which hold data from view which is created because of templates.
A Component and a Template collectively create a view.
Components and corresponding templates communicate through property bindings and event bindings.
Data Binding:
Data binding happens between template and component. It can be either one way or two way binding.
value binding is unidirectional and it is bound from component to template.
Property binding is unidirectional and it is bound from component to template.
Event binding is unidirectional and it is bound from template to component. When any event happens on DOM, then Component it notified.
Two way data binding is bidirectional and combines property binding and event binding.
Metadata:
Metadata provides all angular functionality to typescript classes. Without metadata, there is nothing angular about classes.
Templates and components can communicate with the help of metadata.
Services:
Services are not a separate angular component. Anything can be service.
Usually services include all the business logic and component merely consume it.
It is good practice to have service layer in any application which is not dependent on view part.
Usually services are injected in component where there are required using dependency injection mechanism.
Dependency Injection:
Angular manages a pool of all service instances and stores them in a location.
Whenever a component asks for a specific services, angular looks for that service in the pool.
If service is found then it is given to component so that it can use it.
If service is not found, a new instance is given to component and placed in pool so that other component can also be given.
Directives:
Directives are classes marked with @Directive decoration. They can make structural or behavioural changes in angular apps.
Modules:
Angular apps are modular.They are called NgModules.
Angular apps have one angular class rootModule.
@NgModule is a decorator function which takes a metadata object.
We can define providers, imports, exports and declarations in @NgModule
------------------------------------XXXXXXXXXXXXXXXXXXXXX----------------------------
In previous article, we saw an overview of angular architecture and a small hello world program. We are going to get into details of creating an angular app using Angular CLI which is a great tool for creating a default project structure.

Using Angular CLI:
Usually while creating any app, we manually create files required for development.It is great to have a tool which helps us create a proper structure to keep things organised and get started with development quickly.

Create Angular Project:
Go to your work directory and fire command.


ng new bikes
1
ng new bikes
This will create a project called bikes. Certain directories and files will be created. We will get back to them in a while.

Our objective:
In this tutorial, we are going to create an app which shows a list of bikes. On clicking each bike, it will show information about it. So, what do we need here?

As we are using typescript, we will be writing classes.
Each class will represent a component or normal class which only represents and object.
We need a Bike to represent a bike object.
We need to show a list of bikes, for which a html template is needed.
We also need to show bike information, we can write separate template for that. A corresponding component is needed to hold the information.
So we are going to use angular CLI commands.

on command line execute ng generate component bike  . This will create a component
Execute ng generate component bike-info
Execute ng generate class Bike
We get output as below.

Components Creation
Components Creation

Angular Project Structure:
Angular Project Structure
Angular Project Structure

Now we will get started with development. I like to use Visual Studio Code IDE.

. e2e folder keeps files used for end to end testing
karma.conf.js , protractor.conf.js tsconfig.json, tslint.json are respective configuration files.
package.json : Defines dependencies required for our app.
node_modules: Library of all dependencies.
src: Actual place where we are going to write our code. It consists of components, pipes, directives, whatever we are going to develop. All these can be generated using angular CLI.
This gets generated after doing ng new bikes

 

 

source structure
source structure

 

When we created bike and bike-info components,

This is how structure looks like in src folder.

we created two components bike and bike-info.
Using Angular CLI created respective html, ts, spec.ts and css file for each component.
html is used to write template.
ts file is actual typescript class in which we write component logic
css is where we write styles for component.
spec.ts is test case file.
 

I hope the article helped understand using angular CLI to create project. In next article we will get our bikes app running.






-------------------------------XXXXXX---------------------

In last article, we saw created a structured app with angular cli. Let us continue what we started in last step. We are going to create angular app with multiple components.

Angular App With Multiple Components:
When we start something from scratch, we are focused on making something run as quickly as possible due to which we become casual towards design. A good app will have separate components those don’t interfere with each other much and have a definitive purpose in app. For example, AppComponent should only access other components. Ideally it should not have Bike or other components defined. They should be separate from AppComponent. Let us get back to what we initially started with.

We want to show a list of bikes on a page.
On click, we want to show details of bike.
Let us create angular app with multiple components. In our case those will be AppComponent and BikeInfoComponent.

 

AppComponent is created by default when we create new angular app.
Create BikeInfoComponent as done in previous article.
Create Bike class that acts as bike object.
Bike:

export class Bike {
    id: number;
    model: String;
    manufacturer: String;
}
1
2
3
4
5
export class Bike {
    id: number;
    model: String;
    manufacturer: String;
}
BikeInfoComponent:

import { Component, OnInit, Input } from '@angular/core';
import { Bike } from '../bike';

@Component({
  selector: 'app-bike-info',
  templateUrl: './bike-info.component.html',
  styleUrls: ['./bike-info.component.css']
})
export class BikeInfoComponent implements OnInit {

  @Input() bike: Bike;

  constructor() { }

  ngOnInit() {
  }

}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
import { Component, OnInit, Input } from '@angular/core';
import { Bike } from '../bike';
 
@Component({
  selector: 'app-bike-info',
  templateUrl: './bike-info.component.html',
  styleUrls: ['./bike-info.component.css']
})
export class BikeInfoComponent implements OnInit {
 
  @Input() bike: Bike;
 
  constructor() { }
 
  ngOnInit() {
  }
 
}
Note the @Component annotation. It specifies selector tag, template url and style sheet url for this component. We are going to use <app-bike-info> tag whenever required and corresponding template i.e. bike-info.component.html will be used for rendering.
BikeInfoComponent has a field named bike of type Bike. @Input updates data bound properties when change is detected.
bike-info.component.html:

<div *ngIf="bike">
  <h2>{{bike.model}} details!</h2>
  <div><label>id: </label>{{bike.id}}</div>
  <div>
    <label>model: </label>
    <input [(ngModel)]="bike.model" placeholder="model" />
  </div>
  <div>
    <label>Manufacturer: </label> {{bike.manufacturer}}
  </div>
</div>
1
2
3
4
5
6
7
8
9
10
11
<div *ngIf="bike">
  <h2>{{bike.model}} details!</h2>
  <div><label>id: </label>{{bike.id}}</div>
  <div>
    <label>model: </label>
    <input [(ngModel)]="bike.model" placeholder="model" />
  </div>
  <div>
    <label>Manufacturer: </label> {{bike.manufacturer}}
  </div>
</div>
*ngIf directive check whether bike is present, if yes, it started executing following code.
{{bike.model}} simply evaluates model property of bike.
[(ngModel)] = “bike.model” creates a bidirectional binding between html and component. Changes reflected in component as well as html will be detected by both.
Thus, bike-info.component.html simply displays information.

We created a separate component. Now AppComponent does not have to define bike related components. It can simply invoke/access that. It is the motive of angular apps with multiple components.

AppComponent:

import { Component } from '@angular/core';
import { Bike } from './bike';


const BIKES: Bike[] = [
  { id: 1, model: 'CBR250R', manufacturer: 'Honda' },
  { id: 2, model: 'CBR150R', manufacturer: 'Honda' },
  { id: 3, model: 'Ninja250R', manufacturer: 'Kawasaki' },
  { id: 4, model: 'CBR1000R', manufacturer: 'Honda' },
  { id: 5, model: 'Ninja1000RR', manufacturer: 'Kawasaki' }
];

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Bikes Showroom';
  bikes = BIKES;
  selectedBike: Bike;
  onSelect(bike: Bike): void {   
    this.selectedBike = bike;
  }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
import { Component } from '@angular/core';
import { Bike } from './bike';
 
 
const BIKES: Bike[] = [
  { id: 1, model: 'CBR250R', manufacturer: 'Honda' },
  { id: 2, model: 'CBR150R', manufacturer: 'Honda' },
  { id: 3, model: 'Ninja250R', manufacturer: 'Kawasaki' },
  { id: 4, model: 'CBR1000R', manufacturer: 'Honda' },
  { id: 5, model: 'Ninja1000RR', manufacturer: 'Kawasaki' }
];
 
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Bikes Showroom';
  bikes = BIKES;
  selectedBike: Bike;
  onSelect(bike: Bike): void {   
    this.selectedBike = bike;
  }
}
We created  bikes array and populated it with bikes.
As usual, @Component specifies html and css files to be used for AppComponent
onSelect(bike: Bike) method accepts a bike object which will be passed from template. It assigns the bike received from template to selectedBike variable.
app-component.html:

<h1>{{title}}</h1>
<h2>Bikes</h2>
<ul>
  <li *ngFor="let bike of bikes" (click)="onSelect(bike)">
    {{bike.model}}
  </li>
</ul>
<app-bike-info [bike]="selectedBike"></app-bike-info>
1
2
3
4
5
6
7
8
<h1>{{title}}</h1>
<h2>Bikes</h2>
<ul>
  <li *ngFor="let bike of bikes" (click)="onSelect(bike)">
    {{bike.model}}
  </li>
</ul>
<app-bike-info [bike]="selectedBike"></app-bike-info>
*ngFor iterates over bikes array in AppComponent. 
(click) = “onSelect(bike)” : This is an event binding and calls onSelect() method in AppComponent by sending selected bike as parameter.
{{bike.model}} displays model of bike.
<app-bike-info [bike] = “selectedBike”> : invokes bike-info.component.html which is used to display bike information. [bike] is property binding which accepts value from selectedBike.
We are done with this,

we created BikeInfoComponent and bike-info.component.html
We created AppComponent which accesses BikeInfoComponent.
app.module.ts:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';

import { AppComponent } from './app.component';
import { BikeComponent } from './bike/bike.component';
import { BikeInfoComponent } from './bike-info/bike-info.component';


@NgModule({
  declarations: [
    AppComponent,
    BikeComponent,
    BikeInfoComponent,
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';
 
import { AppComponent } from './app.component';
import { BikeComponent } from './bike/bike.component';
import { BikeInfoComponent } from './bike-info/bike-info.component';
 
 
@NgModule({
  declarations: [
    AppComponent,
    BikeComponent,
    BikeInfoComponent,
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
 

Save all your files and do npm start from project. You should be able to see screen like below.

App Started
App Started

Click on any list item and you will see details below

Bike details
Bike details

 

You can find whole code on https://github.com/theJavaGeek/angular, checkout branch multiple-components.

I hope the article helped understand angular app with multiple components. There are still lot of changes need to be made. Putting list of bikes in AppComponent isn’t a great idea. We will solve that problem in upcoming article. We are going to learn about services.

---------------------------XXXXXXXXXXXXXX--------------------

